2025-8-11
	计划将幸存者、大乱斗、空洞武士、拼好饭和致命打鸡五个游戏融合到一个游戏中。
	
	整理各个游戏的特点:
		小游戏：本项目主体。
			游戏选择界面，可选择游戏。选择后进入该子游戏游戏界面。
			要求：每个子游戏必须有一个开始界面，用于游戏开始或退出到上一级。
		幸存者
			开始界面：
				进入、退出、重玩等功能按钮
			游戏界面：
				角色
				子弹
				怪
				碰撞
				不可点击
				没有光标
		空洞武士
			开始界面：
				进入、退出、重玩等功能按钮
			游戏界面：
				地面-下中锚点
				角色
				怪
				子弹
				AI状态机
				碰撞
				不可点击
				没有光标
		大乱斗
			开始界面：
				进入、退出、重玩等功能按钮
			选角界面：
				角色选择
				不可点击
				没有光标
			游戏界面：
				地面-下中锚点
				云台
				角色
				技能
				子弹
				碰撞
				不可点击
				没有光标
				血条
		致命打鸡
			开始界面：
				进入、退出、重玩等功能按钮
			游戏界面：
				炮座
				炮塔
				子弹
				碰撞
				光标替换
		拼好饭
			开始界面：
				进入、退出、重玩等功能按钮
			游戏界面：
				外卖员
				饮料堆
				餐品堆
				外卖盒堆
				微波炉
				外卖摆放格子
				光标替换
			
	
	需要完成的内容：
		资源管理：所有项目资源的自动加载、释放、绘制
			资源类型：
				图片
				图集
				音乐
			资源池：		代码完成
				纹理
				音频
			代码：
				动画类
		游戏管理
			游戏分类
			游戏的切换
				加载
				运行
				退出
		场景管理
			需要思考和游戏管理的关系
			场景的切换
				加载
				运行
				退出
		对象管理
			将所有游戏对象统一纳入管理
			找到共同点，设定基类
				尺寸
				资源
				坐标
				坐标对齐类型
			对象设定：
				游戏对象：位置，尺寸，
					
		碰撞管理
			需要思考和对象管理的关系
			位置
			碰撞尺寸
			是否开启碰撞
			碰撞类型
			
2025-8-12
	资源管理代码
		图片资源池		都是png
			kdws 有图集
		音效资源池		mp3、wav
		背景音乐资源池	mp3
	尝试所有资源打包成图集处理
2025-8-13
	资源不再打包，图集资源拆分。
	游戏类中并入各种管理器，根据游戏不同情况设立
		角色管理器
		碰撞管理器
		场景管理器
	将开场界面算作游戏0。
	不同游戏的入场加载资源和设置初始化游戏数据，退场清空。
	考虑下资源池是否也要同步清空？
		不清空的话，再次进入游戏需要思考不做二次加载
		清空的话每次切换游戏都要再加载一次资源
2025-8-15
	游戏对象
		动画
		图片
		按钮
	将点击区域合并到对象基类中
		按钮类待完成
2025-8-20
	需要重新思考，关于游戏对象基类，图片，按钮，动画，角色，碰撞箱等基础对象的结构。
	基类：
		位置
		大小
		方向（角度）
		锚点
		点击区域
		是否可点击
		图片：
			图片资源
			动画
				定时器
				帧索引
				资源名和帧总数
				是否循环
				回调函数
		碰撞箱：
			是否可碰撞
			碰撞回调
			自身碰撞层
			目标碰撞层
	角色：
		位置
		大小
		方向（左右）
		锚点
		速度
		状态机
		是否重力模拟
		是否无敌
		无敌闪烁定时器
		无敌状态定时器

2025-8-22
	打算将UI树给概念加入游戏框架，又要大规模该代码了：
		场景基类添加UI树根节点指针
			一个场景通过UI树统一UI对象的增删查改。
			添加增删查改相关代码
		场景基类添加UI对象嘻哈表，通过唯一标识符"对象名"快速查找，就不用遍历UI树。
		将GameObj类改为UI树节点：
			添加父节点指针，和子节点链表指针。
			添加增删查改相关代码
			添加对象对齐方式和相关代码
			等等（还需要细想）
		需要添加新的对象尺寸计算方式。
		等等（还需要细想）
		

2025-8-23
	SDL有现成的纹理采样过滤模式，可直接用
	平铺和拉升需要自己写
	
	越做越多了。优先完成游戏开发。
		先完成对象树
			如此，游戏中所有对象都可以统一调用处理了，前面的先渲染，后面的后渲染
			暂时添加三个绘制层：
				地图
				游戏
				UI
		然后完成图片的平铺和拉伸	
		其他功能暂时不做新增
2025-8-24
	对象树做好了，但是运用到已有的两个场景发现bug：
		运行游戏时，偶尔情况下按钮只显示一个。
	还需要完成的任务：
		相对坐标体系待完成：
			所有对象的坐标，都只是对象自身锚点和父节点锚点的相对坐标。
		图片的拉伸和平铺未完成
			思路：这里主要是计算对象显示尺寸和方式，且并不真的修改设定的尺寸，只是让设定的尺寸无效或部分无效。
				所以这里主要在绘制层做文章。on_render函数上要多写点if。
		
2025-8-25
	坐标体系以及计算完成
	图片的拉伸和平铺：
		功能开发完成，但是在新界面验证中出了问题。明天再说了
		
2025-8-26
	拉伸和平铺，以及对应的进度条组件做好了。目前没有发现问题。
	将血量进度条加入了幸存者游戏界面中。
	下一步是要做文本渲染:
		先要做字体资源的资源池。要求是调用时，发现没有再添加到资源池。和之前的资源加载不一样。
		字体和图片不一样，经常要设置颜色等，所以渲染节点应该使用SDL_Surface，在转换成SDL_Texture渲染。
		功能规划：
			字号
			颜色
			文本内容
				可否在一个文本中，表现出多种颜色？
			需要考虑文本换行、锚点等多种形式
			阴影	
				是否开启
				阴影颜色
				阴影和正文相对位置
			暂定以上这些
			
2025-8-27
	基本完成了字体的加载和获取功能
	字体组件完成少部分
	完成上述工作时发现将窗口、渲染器和相机都放在游戏管理器中不合适，于是将三者拿出来单独包装成一个game_wnd类。
	然后发现游戏的引用体系有问题，然后越调越乱了。明天重新梳理下整个项目的include吧！
	
2028-8-28
	main
		<SDL.h>
		<SDL_ttf.h>
		<SDL_image.h>
		<SDL_mixer.h>

        <chrono>
        <thread>
        
        "game_wnd.h"
           
		game_mgr.h			单例。游戏管理器，记录当前运行游戏类型，管理游戏运行和切换。
			game.h			游戏基类，游戏管理器的管理对象。里面内置了场景管理器，用于记录当前运行场景和切换场景
				scene.h		场景基类，场景管理器的管理对象。用于生成游戏UI、地图和角色等。包含游戏对象树相关内容
					<queue>				对象树层次遍历需要	
					<functional>
					<SDL.h>	
			game_type.h
				<string>
				<iostream>
		"game_obj.h"		游戏对象基类，包括图片、动画、按钮、文字、进度条都基于此。以及资源调用。也是对象树节点，包含父节点指针和子节点链表。
			<forward_list>		子节点链表所需
			<functional>		用于按钮点击，或者动画播放回调
			<SDL.h>
			game_type.h
				<string>
				<iostream>
			vector2.h
				util.h
					<random>
					<cmath>
					<stdexcept>
					<string>
		res_mgr.h			单例。资源管理器。用于资源的加载、释放、获取和资源池管理。游戏是基于SDL库。
			<SDL.h>
			<SDL_image.h>
			<SDL_mixer.h>
			<SDL_ttf.h>
			<unordered_map>		用于建立资源池。
			game_type.h
				<string>
				<iostream>
				
		game_wnd.h			单例。统一了游戏窗口、renderer渲染器和摄像机。
			camera.h			摄像机类，用于实现画面抖动效果
				timer.h"			定时器
					<functional>
				vector2.h"			坐标计算
					util.h
						<random>
						<cmath>
						<stdexcept>
						<string>
				game_type.h"
					<string>
					<iostream>
				<SDL.h>

2028-8-29
	将文本组件添加到场景中，简单测试后基本能用。
	下一步将添加角色和怪物。需要验证下动画组件是否可用。
	角色基类完成部分，动画类修改了部分
		计划角色类中，这届将UI组件添加到对应的层接节点。
		
2028-8-30
	初步将角色添加到场景。下一步需要完善角色移动功能。